generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  engineType      = "esm"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  STAFF
  ADMIN
}

model Course {
  id                 String   @id // User-provided id
  githubOrg          String
  githubRepoPrefix   String
  githubToken        String
  name               String
  jenkinsToken       String
  feedbackBranchName String
  courseCutoff       DateTime
  jenkinsBaseUrl     String
  courseTimezone     String
  gradesRepo         String
  rosterRepo         String
  firstLabDate       DateTime

  // Extensions config
  numExtensions     Int
  numExtensionHours Int

  // Relations
  users                 Users[]
  Job                   Job[]
  Assignment            Assignment[]
  StagingGrades         StagingGrades[]
  PublishedGrades       PublishedGrades[]
  Extensions            Extensions[]
  ExtensionUsageHistory ExtensionUsageHistory[]
  AttendanceRecord      AttendanceRecord[]
}

model Users {
  netId    String
  role     Role
  courseId String
  enabled  Boolean @default(true)
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uin      String?
  name     String?

  Grades                PublishedGrades[]
  StagingGrades         StagingGrades[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Extensions            Extensions[]
  Job                   Job[]
  ExtensionUsageHistory ExtensionUsageHistory[]
  AttendanceRecord      AttendanceRecord[]

  @@id([netId, courseId]) // Composite primary key
  @@unique([courseId, uin])
  @@index([netId, enabled])
  @@index([courseId, netId, enabled])
  @@index([courseId, uin, enabled])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  INFRA_ERROR
  TIMEOUT
}

enum JobType {
  STUDENT_INITIATED
  FINAL_GRADING
  REGRADE
  STAFF_INITIATED
  STAFF_INITIATED_GRADING
}

enum AssignmentVisibility {
  DEFAULT
  FORCE_OPEN
  FORCE_CLOSE
  INVISIBLE_FORCE_CLOSE
}

enum AssignmentQuota {
  DAILY
  TOTAL
}

enum Category {
  LAB
  MP
  ATTENDANCE
  BONUS
  FINAL
  OTHER
}

enum AutogradableCategory {
  LAB
  MP
}

model Assignment {
  id                String
  name              String
  courseId          String
  visibility        AssignmentVisibility
  quotaPeriod       AssignmentQuota
  category          Category
  studentExtendable Boolean

  jenkinsPipelineName   String?
  quotaAmount           Int
  finalGradingRunId     String?
  openAt                DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Job                   Job[]
  Course                Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  PublishedGrades       PublishedGrades[]
  Extensions            Extensions[]
  ExtensionUsageHistory ExtensionUsageHistory[]
  AttendanceRecord      AttendanceRecord[]

  @@id([courseId, id]) // Composite primary key
  @@index([courseId, visibility])
}

model Job {
  id                   String                @id @default(cuid())
  name                 String
  courseId             String
  course               Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignmentId         String
  netId                String[]
  type                 JobType
  autogradableCategory AutogradableCategory? // a workaround just to get the enum to be generated
  buildUrl             String?
  queueUrl             String?

  dueAt              DateTime
  isScheduledJob     Boolean         @default(false)
  scheduledAt        DateTime?
  startedAt          DateTime?
  status             JobStatus       @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  failedAt           DateTime?
  StagingGrades      StagingGrades[]
  Extensions         Extensions[]
  Assignment         Assignment?     @relation(fields: [assignmentCourseId, assignmentId], references: [courseId, id], onDelete: Cascade)
  assignmentCourseId String?
  Users              Users?          @relation(fields: [usersNetId, usersCourseId], references: [netId, courseId])
  usersNetId         String?
  usersCourseId      String?

  @@index([status, scheduledAt])
  @@index([name, status])
  @@index([netId, courseId, assignmentId, type]) // get user runs call
}

model PublishedGrades {
  courseId     String
  assignmentId String
  netId        String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [courseId, assignmentId], references: [courseId, id], onDelete: NoAction)
  comments     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  score        Float
  Users        Users      @relation(fields: [netId, courseId], references: [netId, courseId])

  @@id([courseId, assignmentId, netId])
  @@index([courseId, assignmentId])
  @@index([courseId, netId])
}

model StagingGrades {
  jobId    String
  netId    String
  score    Float
  comments String?

  gradingJob Job      @relation(fields: [jobId], references: [id], onDelete: NoAction)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Course     Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  Users      Users    @relation(fields: [netId, courseId], references: [netId, courseId])

  @@id([jobId, netId])
  @@index([jobId])
}

enum ExtensionInitiator {
  STUDENT
  STAFF
}

model Extensions {
  id                String             @id @default(cuid())
  courseId          String
  assignmentId      String
  netId             String
  quotaAmount       Int
  finalGradingRunId String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         String
  extensionType     ExtensionInitiator

  quotaPeriod           AssignmentQuota
  Course                Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Users                 Users                   @relation(fields: [netId, courseId], references: [netId, courseId])
  Assignment            Assignment              @relation(fields: [assignmentId, courseId], references: [id, courseId], onDelete: Cascade)
  GradingJob            Job?                    @relation(fields: [finalGradingRunId], references: [id], onDelete: Cascade)
  openAt                DateTime
  closeAt               DateTime
  ExtensionUsageHistory ExtensionUsageHistory[]

  @@index([courseId, assignmentId, netId])
}

model ExtensionUsageHistory {
  extensionId  String
  courseId     String
  assignmentId String
  netId        String
  Course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Users        Users      @relation(fields: [netId, courseId], references: [netId, courseId])
  Assignment   Assignment @relation(fields: [assignmentId, courseId], references: [id, courseId])
  Extension    Extensions @relation(fields: [extensionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([extensionId, courseId, assignmentId, netId, createdAt])
}

model AttendanceRecord {
  courseId  String
  weekId    Int
  netId     String
  submitted Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  Course             Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Users              Users       @relation(fields: [netId, courseId], references: [netId, courseId])
  Assignment         Assignment? @relation(fields: [assignmentCourseId, assignmentId], references: [courseId, id])
  assignmentCourseId String?
  assignmentId       String?

  @@id([courseId, weekId, netId])
  @@index([courseId, weekId, createdBy])
}
